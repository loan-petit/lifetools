### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type AuthPayload {
  expiresIn: Int!
  token: String!
  user: User!
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

type DailyRoutineEvent {
  endTime: Int!
  id: ID!
  name: String!
  owner: User!
  startTime: Int!
}

input DailyRoutineEventCreateInput {
  endTime: Int!
  id: ID
  name: String!
  owner: UserCreateOneWithoutOwnerInput!
  startTime: Int!
}

input DailyRoutineEventCreateManyWithoutDailyRoutineInput {
  connect: [DailyRoutineEventWhereUniqueInput!]
  create: [DailyRoutineEventCreateWithoutOwnerInput!]
}

input DailyRoutineEventCreateWithoutOwnerInput {
  endTime: Int!
  id: ID
  name: String!
  startTime: Int!
}

input DailyRoutineEventScalarWhereInput {
  AND: [DailyRoutineEventScalarWhereInput!]
  endTime: IntFilter
  id: StringFilter
  name: StringFilter
  NOT: [DailyRoutineEventScalarWhereInput!]
  OR: [DailyRoutineEventScalarWhereInput!]
  startTime: IntFilter
}

input DailyRoutineEventUpdateInput {
  endTime: Int
  id: ID
  name: String
  owner: UserUpdateOneRequiredWithoutDailyRoutineInput
  startTime: Int
}

input DailyRoutineEventUpdateManyDataInput {
  endTime: Int
  id: ID
  name: String
  startTime: Int
}

input DailyRoutineEventUpdateManyWithoutOwnerInput {
  connect: [DailyRoutineEventWhereUniqueInput!]
  create: [DailyRoutineEventCreateWithoutOwnerInput!]
  delete: [DailyRoutineEventWhereUniqueInput!]
  deleteMany: [DailyRoutineEventScalarWhereInput!]
  disconnect: [DailyRoutineEventWhereUniqueInput!]
  set: [DailyRoutineEventWhereUniqueInput!]
  update: [DailyRoutineEventUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [DailyRoutineEventUpdateManyWithWhereNestedInput!]
  upsert: [DailyRoutineEventUpsertWithWhereUniqueWithoutOwnerInput!]
}

input DailyRoutineEventUpdateManyWithWhereNestedInput {
  data: DailyRoutineEventUpdateManyDataInput!
  where: DailyRoutineEventScalarWhereInput!
}

input DailyRoutineEventUpdateWithoutOwnerDataInput {
  endTime: Int
  id: ID
  name: String
  startTime: Int
}

input DailyRoutineEventUpdateWithWhereUniqueWithoutOwnerInput {
  data: DailyRoutineEventUpdateWithoutOwnerDataInput!
  where: DailyRoutineEventWhereUniqueInput!
}

input DailyRoutineEventUpsertWithWhereUniqueWithoutOwnerInput {
  create: DailyRoutineEventCreateWithoutOwnerInput!
  update: DailyRoutineEventUpdateWithoutOwnerDataInput!
  where: DailyRoutineEventWhereUniqueInput!
}

input DailyRoutineEventWhereUniqueInput {
  id: ID
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

type Goal {
  date: DateTime!
  id: ID!
  isCompleted: Boolean!
  name: String!
  owner: User!
}

input GoalCreateInput {
  date: DateTime!
  id: ID
  isCompleted: Boolean
  name: String!
  owner: UserCreateOneWithoutOwnerInput!
}

input GoalCreateManyWithoutGoalsInput {
  connect: [GoalWhereUniqueInput!]
  create: [GoalCreateWithoutOwnerInput!]
}

input GoalCreateWithoutOwnerInput {
  date: DateTime!
  id: ID
  isCompleted: Boolean
  name: String!
}

input GoalScalarWhereInput {
  AND: [GoalScalarWhereInput!]
  date: DateTimeFilter
  id: StringFilter
  isCompleted: BooleanFilter
  name: StringFilter
  NOT: [GoalScalarWhereInput!]
  OR: [GoalScalarWhereInput!]
}

input GoalUpdateInput {
  date: DateTime
  id: ID
  isCompleted: Boolean
  name: String
  owner: UserUpdateOneRequiredWithoutGoalsInput
}

input GoalUpdateManyDataInput {
  date: DateTime
  id: ID
  isCompleted: Boolean
  name: String
}

input GoalUpdateManyWithoutOwnerInput {
  connect: [GoalWhereUniqueInput!]
  create: [GoalCreateWithoutOwnerInput!]
  delete: [GoalWhereUniqueInput!]
  deleteMany: [GoalScalarWhereInput!]
  disconnect: [GoalWhereUniqueInput!]
  set: [GoalWhereUniqueInput!]
  update: [GoalUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [GoalUpdateManyWithWhereNestedInput!]
  upsert: [GoalUpsertWithWhereUniqueWithoutOwnerInput!]
}

input GoalUpdateManyWithWhereNestedInput {
  data: GoalUpdateManyDataInput!
  where: GoalScalarWhereInput!
}

input GoalUpdateWithoutOwnerDataInput {
  date: DateTime
  id: ID
  isCompleted: Boolean
  name: String
}

input GoalUpdateWithWhereUniqueWithoutOwnerInput {
  data: GoalUpdateWithoutOwnerDataInput!
  where: GoalWhereUniqueInput!
}

input GoalUpsertWithWhereUniqueWithoutOwnerInput {
  create: GoalCreateWithoutOwnerInput!
  update: GoalUpdateWithoutOwnerDataInput!
  where: GoalWhereUniqueInput!
}

input GoalWhereUniqueInput {
  id: ID
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Mutation {
  createOneDailyRoutineEvent(data: DailyRoutineEventCreateInput!): DailyRoutineEvent!
  createOneGoal(data: GoalCreateInput!): Goal!
  deleteOneDailyRoutineEvent(where: DailyRoutineEventWhereUniqueInput!): DailyRoutineEvent
  deleteOneGoal(where: GoalWhereUniqueInput!): Goal
  deleteOneUser(where: UserWhereUniqueInput!): User
  signin(password: String!, username: String!): AuthPayload!
  signup(password: String!, passwordConfirmation: String!, username: String!): AuthPayload!
  updateOneDailyRoutineEvent(data: DailyRoutineEventUpdateInput!, where: DailyRoutineEventWhereUniqueInput!): DailyRoutineEvent
  updateOneGoal(data: GoalUpdateInput!, where: GoalWhereUniqueInput!): Goal
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
}

type Query {
  dailyRoutineEvent(where: DailyRoutineEventWhereUniqueInput!): DailyRoutineEvent
  dailyRoutineEvents(after: ID, before: ID, first: Int, last: Int, skip: Int): [DailyRoutineEvent!]!
  goal(where: GoalWhereUniqueInput!): Goal
  goals(after: ID, before: ID, first: Int, last: Int, skip: Int): [Goal!]!
  me: AuthPayload!
  user(where: UserWhereUniqueInput!): User
  users(after: ID, before: ID, first: Int, last: Int, skip: Int): [User!]!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  dailyRoutine(after: ID, before: ID, first: Int, last: Int, skip: Int): [DailyRoutineEvent!]!
  goals(after: ID, before: ID, first: Int, last: Int, skip: Int): [Goal!]!
  id: ID!
}

input UserCreateOneWithoutOwnerInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutDailyRoutineInput
}

input UserCreateWithoutDailyRoutineInput {
  createdAt: DateTime
  goals: GoalCreateManyWithoutGoalsInput
  id: ID
  password: String!
  username: String!
}

input UserCreateWithoutGoalsInput {
  createdAt: DateTime
  dailyRoutine: DailyRoutineEventCreateManyWithoutDailyRoutineInput
  id: ID
  password: String!
  username: String!
}

input UserUpdateInput {
  createdAt: DateTime
  dailyRoutine: DailyRoutineEventUpdateManyWithoutOwnerInput
  goals: GoalUpdateManyWithoutOwnerInput
  id: ID
  password: String
  username: String
}

input UserUpdateOneRequiredWithoutDailyRoutineInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutDailyRoutineInput
  update: UserUpdateWithoutDailyRoutineDataInput
  upsert: UserUpsertWithoutDailyRoutineInput
}

input UserUpdateOneRequiredWithoutGoalsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutGoalsInput
  update: UserUpdateWithoutGoalsDataInput
  upsert: UserUpsertWithoutGoalsInput
}

input UserUpdateWithoutDailyRoutineDataInput {
  createdAt: DateTime
  goals: GoalUpdateManyWithoutOwnerInput
  id: ID
  password: String
  username: String
}

input UserUpdateWithoutGoalsDataInput {
  createdAt: DateTime
  dailyRoutine: DailyRoutineEventUpdateManyWithoutOwnerInput
  id: ID
  password: String
  username: String
}

input UserUpsertWithoutDailyRoutineInput {
  create: UserCreateWithoutDailyRoutineInput!
  update: UserUpdateWithoutDailyRoutineDataInput!
}

input UserUpsertWithoutGoalsInput {
  create: UserCreateWithoutGoalsInput!
  update: UserUpdateWithoutGoalsDataInput!
}

input UserWhereUniqueInput {
  id: ID
  username: String
}
