### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type AuthPayload {
  expiresIn: Int!
  token: String!
  user: User!
}

type Content {
  averageAccessibilityRating: Float
  averageMark: Float
  averageQualityRating: Float
  category: String
  contentLists(after: String, before: String, first: Int, last: Int, skip: Int): [ContentList!]
  createdAt: DateTime!
  feedbacks(after: String, before: String, first: Int, last: Int, skip: Int): [ContentFeedback!]
  id: ID!
  nbrOfView: Int!
  summary: String
  title: String
  type: String
  url: String!
}

input ContentCreateManyWithoutContentsInput {
  connect: [ContentWhereUniqueInput!]
  create: [ContentCreateWithoutContentListsInput!]
}

input ContentCreateOneWithoutContentInput {
  connect: ContentWhereUniqueInput
  create: ContentCreateWithoutFeedbacksInput
}

input ContentCreateWithoutContentListsInput {
  averageAccessibilityRating: Float
  averageMark: Float
  averageQualityRating: Float
  category: String
  createdAt: DateTime
  feedbacks: ContentFeedbackCreateManyWithoutFeedbacksInput
  id: ID
  nbrOfView: Int
  summary: String
  title: String
  type: String
  url: String!
}

input ContentCreateWithoutFeedbacksInput {
  averageAccessibilityRating: Float
  averageMark: Float
  averageQualityRating: Float
  category: String
  contentLists: ContentListCreateManyWithoutContentListsInput
  createdAt: DateTime
  id: ID
  nbrOfView: Int
  summary: String
  title: String
  type: String
  url: String!
}

type ContentFeedback {
  accessibilityRating: Float
  author: User!
  content: Content!
  id: ID!
  isViewed: Boolean!
  mark: Float!
  qualityRating: Float
}

input ContentFeedbackCreateManyWithoutContentFeedbacksInput {
  connect: [ContentFeedbackWhereUniqueInput!]
  create: [ContentFeedbackCreateWithoutAuthorInput!]
}

input ContentFeedbackCreateManyWithoutFeedbacksInput {
  connect: [ContentFeedbackWhereUniqueInput!]
  create: [ContentFeedbackCreateWithoutContentInput!]
}

input ContentFeedbackCreateWithoutAuthorInput {
  accessibilityRating: Float
  content: ContentCreateOneWithoutContentInput!
  id: ID
  isViewed: Boolean!
  mark: Float!
  qualityRating: Float
}

input ContentFeedbackCreateWithoutContentInput {
  accessibilityRating: Float
  author: UserCreateOneWithoutAuthorInput!
  id: ID
  isViewed: Boolean!
  mark: Float!
  qualityRating: Float
}

input ContentFeedbackUpdateInput {
  accessibilityRating: Float
  author: UserUpdateOneRequiredWithoutContentFeedbacksInput
  content: ContentUpdateOneRequiredWithoutFeedbacksInput
  id: ID
  isViewed: Boolean
  mark: Float
  qualityRating: Float
}

input ContentFeedbackUpdateManyDataInput {
  accessibilityRating: Float
  id: ID
  isViewed: Boolean
  mark: Float
  qualityRating: Float
}

input ContentFeedbackUpdateManyWithoutAuthorInput {
  connect: [ContentFeedbackWhereUniqueInput!]
  create: [ContentFeedbackCreateWithoutAuthorInput!]
  delete: [ContentFeedbackWhereUniqueInput!]
  deleteMany: [MutationUpdateOneUserWhereInput!]
  disconnect: [ContentFeedbackWhereUniqueInput!]
  set: [ContentFeedbackWhereUniqueInput!]
  update: [ContentFeedbackUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [ContentFeedbackUpdateManyWithWhereNestedInput!]
  upsert: [ContentFeedbackUpsertWithWhereUniqueWithoutAuthorInput!]
}

input ContentFeedbackUpdateManyWithoutContentInput {
  connect: [ContentFeedbackWhereUniqueInput!]
  create: [ContentFeedbackCreateWithoutContentInput!]
  delete: [ContentFeedbackWhereUniqueInput!]
  deleteMany: [MutationUpdateOneContentListWhereInput!]
  disconnect: [ContentFeedbackWhereUniqueInput!]
  set: [ContentFeedbackWhereUniqueInput!]
  update: [ContentFeedbackUpdateWithWhereUniqueWithoutContentInput!]
  updateMany: [ContentFeedbackUpdateManyWithWhereNestedInput!]
  upsert: [ContentFeedbackUpsertWithWhereUniqueWithoutContentInput!]
}

input ContentFeedbackUpdateManyWithWhereNestedInput {
  data: ContentFeedbackUpdateManyDataInput!
  where: MutationUpdateOneUserWhereInput!
}

input ContentFeedbackUpdateWithoutAuthorDataInput {
  accessibilityRating: Float
  content: ContentUpdateOneRequiredWithoutFeedbacksInput
  id: ID
  isViewed: Boolean
  mark: Float
  qualityRating: Float
}

input ContentFeedbackUpdateWithoutContentDataInput {
  accessibilityRating: Float
  author: UserUpdateOneRequiredWithoutContentFeedbacksInput
  id: ID
  isViewed: Boolean
  mark: Float
  qualityRating: Float
}

input ContentFeedbackUpdateWithWhereUniqueWithoutAuthorInput {
  data: ContentFeedbackUpdateWithoutAuthorDataInput!
  where: ContentFeedbackWhereUniqueInput!
}

input ContentFeedbackUpdateWithWhereUniqueWithoutContentInput {
  data: ContentFeedbackUpdateWithoutContentDataInput!
  where: ContentFeedbackWhereUniqueInput!
}

input ContentFeedbackUpsertWithWhereUniqueWithoutAuthorInput {
  create: ContentFeedbackCreateWithoutAuthorInput!
  update: ContentFeedbackUpdateWithoutAuthorDataInput!
  where: ContentFeedbackWhereUniqueInput!
}

input ContentFeedbackUpsertWithWhereUniqueWithoutContentInput {
  create: ContentFeedbackCreateWithoutContentInput!
  update: ContentFeedbackUpdateWithoutContentDataInput!
  where: ContentFeedbackWhereUniqueInput!
}

input ContentFeedbackWhereUniqueInput {
  id: ID
}

type ContentList {
  contents(after: String, before: String, first: Int, last: Int, skip: Int): [Content!]
  createdAt: DateTime!
  description: String
  followers(after: String, before: String, first: Int, last: Int, skip: Int): [User!]
  id: ID!
  owner: User!
  status: String!
  title: String!
}

input ContentListCreateManyWithoutContentListsFollowedInput {
  connect: [ContentListWhereUniqueInput!]
  create: [ContentListCreateWithoutFollowersInput!]
}

input ContentListCreateManyWithoutContentListsInput {
  connect: [ContentListWhereUniqueInput!]
  create: [ContentListCreateWithoutOwnerInput!]
}

input ContentListCreateWithoutContentsInput {
  createdAt: DateTime
  description: String
  followers: UserCreateManyWithoutFollowersInput
  id: ID
  owner: UserCreateOneWithoutOwnerInput!
  status: String
  title: String!
}

input ContentListCreateWithoutFollowersInput {
  contents: ContentCreateManyWithoutContentsInput
  createdAt: DateTime
  description: String
  id: ID
  owner: UserCreateOneWithoutOwnerInput!
  status: String
  title: String!
}

input ContentListCreateWithoutOwnerInput {
  contents: ContentCreateManyWithoutContentsInput
  createdAt: DateTime
  description: String
  followers: UserCreateManyWithoutFollowersInput
  id: ID
  status: String
  title: String!
}

input ContentListUpdateInput {
  contents: ContentUpdateManyWithoutContentListsInput
  createdAt: DateTime
  description: String
  followers: UserUpdateManyWithoutContentListsFollowedInput
  id: ID
  owner: UserUpdateOneRequiredWithoutContentListsInput
  status: String
  title: String
}

input ContentListUpdateManyDataInput {
  createdAt: DateTime
  description: String
  id: ID
  status: String
  title: String
}

input ContentListUpdateManyWithoutContentsInput {
  connect: [ContentListWhereUniqueInput!]
  create: [ContentListCreateWithoutContentsInput!]
  delete: [ContentListWhereUniqueInput!]
  deleteMany: [MutationUpdateOneContentFeedbackWhereInput!]
  disconnect: [ContentListWhereUniqueInput!]
  set: [ContentListWhereUniqueInput!]
  update: [ContentListUpdateWithWhereUniqueWithoutContentsInput!]
  updateMany: [ContentListUpdateManyWithWhereNestedInput!]
  upsert: [ContentListUpsertWithWhereUniqueWithoutContentsInput!]
}

input ContentListUpdateManyWithoutFollowersInput {
  connect: [ContentListWhereUniqueInput!]
  create: [ContentListCreateWithoutFollowersInput!]
  delete: [ContentListWhereUniqueInput!]
  deleteMany: [MutationUpdateOneUserWhereInput!]
  disconnect: [ContentListWhereUniqueInput!]
  set: [ContentListWhereUniqueInput!]
  update: [ContentListUpdateWithWhereUniqueWithoutFollowersInput!]
  updateMany: [ContentListUpdateManyWithWhereNestedInput!]
  upsert: [ContentListUpsertWithWhereUniqueWithoutFollowersInput!]
}

input ContentListUpdateManyWithoutOwnerInput {
  connect: [ContentListWhereUniqueInput!]
  create: [ContentListCreateWithoutOwnerInput!]
  delete: [ContentListWhereUniqueInput!]
  deleteMany: [MutationUpdateOneUserWhereInput!]
  disconnect: [ContentListWhereUniqueInput!]
  set: [ContentListWhereUniqueInput!]
  update: [ContentListUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [ContentListUpdateManyWithWhereNestedInput!]
  upsert: [ContentListUpsertWithWhereUniqueWithoutOwnerInput!]
}

input ContentListUpdateManyWithWhereNestedInput {
  data: ContentListUpdateManyDataInput!
  where: MutationUpdateOneUserWhereInput!
}

input ContentListUpdateWithoutContentsDataInput {
  createdAt: DateTime
  description: String
  followers: UserUpdateManyWithoutContentListsFollowedInput
  id: ID
  owner: UserUpdateOneRequiredWithoutContentListsInput
  status: String
  title: String
}

input ContentListUpdateWithoutFollowersDataInput {
  contents: ContentUpdateManyWithoutContentListsInput
  createdAt: DateTime
  description: String
  id: ID
  owner: UserUpdateOneRequiredWithoutContentListsInput
  status: String
  title: String
}

input ContentListUpdateWithoutOwnerDataInput {
  contents: ContentUpdateManyWithoutContentListsInput
  createdAt: DateTime
  description: String
  followers: UserUpdateManyWithoutContentListsFollowedInput
  id: ID
  status: String
  title: String
}

input ContentListUpdateWithWhereUniqueWithoutContentsInput {
  data: ContentListUpdateWithoutContentsDataInput!
  where: ContentListWhereUniqueInput!
}

input ContentListUpdateWithWhereUniqueWithoutFollowersInput {
  data: ContentListUpdateWithoutFollowersDataInput!
  where: ContentListWhereUniqueInput!
}

input ContentListUpdateWithWhereUniqueWithoutOwnerInput {
  data: ContentListUpdateWithoutOwnerDataInput!
  where: ContentListWhereUniqueInput!
}

input ContentListUpsertWithWhereUniqueWithoutContentsInput {
  create: ContentListCreateWithoutContentsInput!
  update: ContentListUpdateWithoutContentsDataInput!
  where: ContentListWhereUniqueInput!
}

input ContentListUpsertWithWhereUniqueWithoutFollowersInput {
  create: ContentListCreateWithoutFollowersInput!
  update: ContentListUpdateWithoutFollowersDataInput!
  where: ContentListWhereUniqueInput!
}

input ContentListUpsertWithWhereUniqueWithoutOwnerInput {
  create: ContentListCreateWithoutOwnerInput!
  update: ContentListUpdateWithoutOwnerDataInput!
  where: ContentListWhereUniqueInput!
}

input ContentListWhereUniqueInput {
  id: ID
}

input ContentUpdateManyDataInput {
  averageAccessibilityRating: Float
  averageMark: Float
  averageQualityRating: Float
  category: String
  createdAt: DateTime
  id: ID
  nbrOfView: Int
  summary: String
  title: String
  type: String
  url: String
}

input ContentUpdateManyWithoutContentListsInput {
  connect: [ContentWhereUniqueInput!]
  create: [ContentCreateWithoutContentListsInput!]
  delete: [ContentWhereUniqueInput!]
  deleteMany: [MutationUpdateOneContentListWhereInput!]
  disconnect: [ContentWhereUniqueInput!]
  set: [ContentWhereUniqueInput!]
  update: [ContentUpdateWithWhereUniqueWithoutContentListsInput!]
  updateMany: [ContentUpdateManyWithWhereNestedInput!]
  upsert: [ContentUpsertWithWhereUniqueWithoutContentListsInput!]
}

input ContentUpdateManyWithWhereNestedInput {
  data: ContentUpdateManyDataInput!
  where: MutationUpdateOneContentListWhereInput!
}

input ContentUpdateOneRequiredWithoutFeedbacksInput {
  connect: ContentWhereUniqueInput
  create: ContentCreateWithoutFeedbacksInput
  update: ContentUpdateWithoutFeedbacksDataInput
  upsert: ContentUpsertWithoutFeedbacksInput
}

input ContentUpdateWithoutContentListsDataInput {
  averageAccessibilityRating: Float
  averageMark: Float
  averageQualityRating: Float
  category: String
  createdAt: DateTime
  feedbacks: ContentFeedbackUpdateManyWithoutContentInput
  id: ID
  nbrOfView: Int
  summary: String
  title: String
  type: String
  url: String
}

input ContentUpdateWithoutFeedbacksDataInput {
  averageAccessibilityRating: Float
  averageMark: Float
  averageQualityRating: Float
  category: String
  contentLists: ContentListUpdateManyWithoutContentsInput
  createdAt: DateTime
  id: ID
  nbrOfView: Int
  summary: String
  title: String
  type: String
  url: String
}

input ContentUpdateWithWhereUniqueWithoutContentListsInput {
  data: ContentUpdateWithoutContentListsDataInput!
  where: ContentWhereUniqueInput!
}

input ContentUpsertWithoutFeedbacksInput {
  create: ContentCreateWithoutFeedbacksInput!
  update: ContentUpdateWithoutFeedbacksDataInput!
}

input ContentUpsertWithWhereUniqueWithoutContentListsInput {
  create: ContentCreateWithoutContentListsInput!
  update: ContentUpdateWithoutContentListsDataInput!
  where: ContentWhereUniqueInput!
}

input ContentWhereUniqueInput {
  id: ID
  url: String
}

"""DateTime"""
scalar DateTime

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Mutation {
  createContent(accessibilityRating: Float, category: String, mark: Float, qualityRating: Float, summary: String, title: String, type: String, url: String): Content!
  createContentFeedback(accessibilityRating: Float, contentId: ID, mark: Float, qualityRating: Float): ContentFeedback!
  createContentList(description: String, status: String, title: String): ContentList!
  deleteOneContentFeedback(where: ContentFeedbackWhereUniqueInput!): ContentFeedback
  deleteOneContentList(where: ContentListWhereUniqueInput!): ContentList
  deleteOneUser(where: UserWhereUniqueInput!): User
  followContentList(id: ID): ContentList!
  followUser(id: ID): User!
  signin(email: String, password: String): AuthPayload!
  signup(email: String, firstName: String, lastName: String, password: String, passwordConfirmation: String): AuthPayload!
  unfollowContentList(id: ID): ContentList!
  unfollowUser(id: ID): User!
  updateOneContentFeedback(data: ContentFeedbackUpdateInput!, where: ContentFeedbackWhereUniqueInput!): ContentFeedback
  updateOneContentList(data: ContentListUpdateInput!, where: ContentListWhereUniqueInput!): ContentList
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
}

input MutationUpdateOneContentFeedbackFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input MutationUpdateOneContentFeedbackWhereInput {
  AND: [MutationUpdateOneContentFeedbackWhereInput!]
  contents: MutationUpdateOneContentFeedbackFilter
  createdAt: MutationUpdateOneContentFeedbackFilter
  description: NullableStringFilter
  followers: MutationUpdateOneContentFeedbackFilter
  id: StringFilter
  NOT: [MutationUpdateOneContentFeedbackWhereInput!]
  OR: [MutationUpdateOneContentFeedbackWhereInput!]
  status: StringFilter
  title: StringFilter
}

input MutationUpdateOneContentListFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input MutationUpdateOneContentListWhereInput {
  AND: [MutationUpdateOneContentListWhereInput!]
  averageAccessibilityRating: MutationUpdateOneContentListFilter
  averageMark: MutationUpdateOneContentListFilter
  averageQualityRating: MutationUpdateOneContentListFilter
  category: NullableStringFilter
  contentLists: MutationUpdateOneContentListFilter
  createdAt: MutationUpdateOneContentListFilter
  feedbacks: MutationUpdateOneContentListFilter
  id: StringFilter
  nbrOfView: IntFilter
  NOT: [MutationUpdateOneContentListWhereInput!]
  OR: [MutationUpdateOneContentListWhereInput!]
  summary: NullableStringFilter
  title: NullableStringFilter
  type: NullableStringFilter
  url: StringFilter
}

input MutationUpdateOneUserFilter {
  every: MutationUpdateOneUserWhereInput
  none: MutationUpdateOneUserWhereInput
  some: MutationUpdateOneUserWhereInput
}

input MutationUpdateOneUserWhereInput {
  AND: [MutationUpdateOneUserWhereInput!]
  contentFeedbacks: MutationUpdateOneUserFilter
  contentLists: MutationUpdateOneUserFilter
  contentListsFollowed: MutationUpdateOneUserFilter
  description: NullableStringFilter
  email: StringFilter
  firstName: StringFilter
  followers: MutationUpdateOneUserFilter
  following: MutationUpdateOneUserFilter
  id: StringFilter
  lastName: StringFilter
  NOT: [MutationUpdateOneUserWhereInput!]
  OR: [MutationUpdateOneUserWhereInput!]
  password: StringFilter
  title: StringFilter
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Query {
  filterContentLists(searchString: String): [ContentList!]!
  filterContents(searchString: String): [Content!]!
  filterUsers(searchString: String): [User!]!
  findManyContent(after: String, before: String, first: Int, last: Int, skip: Int): [Content!]
  findManyContentList(after: String, before: String, first: Int, last: Int, skip: Int): [ContentList!]
  findManyUser(after: String, before: String, first: Int, last: Int, skip: Int): [User!]
  findOneContent(where: ContentWhereUniqueInput!): Content
  findOneContentList(where: ContentListWhereUniqueInput!): ContentList
  findOneUser(where: UserWhereUniqueInput!): User
  me: AuthPayload!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  contentFeedbacks(after: String, before: String, first: Int, last: Int, skip: Int): [ContentFeedback!]
  contentLists(after: String, before: String, first: Int, last: Int, skip: Int): [ContentList!]
  contentListsFollowed(after: String, before: String, first: Int, last: Int, skip: Int): [ContentList!]
  description: String
  firstName: String!
  followers(after: String, before: String, first: Int, last: Int, skip: Int): [User!]
  following(after: String, before: String, first: Int, last: Int, skip: Int): [User!]
  id: ID!
  lastName: String!
  title: String!
}

input UserCreateManyWithoutFollowersInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFollowingInput!]
}

input UserCreateManyWithoutFollowingInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFollowersInput!]
}

input UserCreateOneWithoutAuthorInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutContentFeedbacksInput
}

input UserCreateOneWithoutOwnerInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutContentListsInput
}

input UserCreateWithoutContentFeedbacksInput {
  contentLists: ContentListCreateManyWithoutContentListsInput
  contentListsFollowed: ContentListCreateManyWithoutContentListsFollowedInput
  description: String
  email: String!
  firstName: String!
  followers: UserCreateManyWithoutFollowersInput
  following: UserCreateManyWithoutFollowingInput
  id: ID
  lastName: String!
  password: String!
  title: String
}

input UserCreateWithoutContentListsFollowedInput {
  contentFeedbacks: ContentFeedbackCreateManyWithoutContentFeedbacksInput
  contentLists: ContentListCreateManyWithoutContentListsInput
  description: String
  email: String!
  firstName: String!
  followers: UserCreateManyWithoutFollowersInput
  following: UserCreateManyWithoutFollowingInput
  id: ID
  lastName: String!
  password: String!
  title: String
}

input UserCreateWithoutContentListsInput {
  contentFeedbacks: ContentFeedbackCreateManyWithoutContentFeedbacksInput
  contentListsFollowed: ContentListCreateManyWithoutContentListsFollowedInput
  description: String
  email: String!
  firstName: String!
  followers: UserCreateManyWithoutFollowersInput
  following: UserCreateManyWithoutFollowingInput
  id: ID
  lastName: String!
  password: String!
  title: String
}

input UserCreateWithoutFollowersInput {
  contentFeedbacks: ContentFeedbackCreateManyWithoutContentFeedbacksInput
  contentLists: ContentListCreateManyWithoutContentListsInput
  contentListsFollowed: ContentListCreateManyWithoutContentListsFollowedInput
  description: String
  email: String!
  firstName: String!
  following: UserCreateManyWithoutFollowingInput
  id: ID
  lastName: String!
  password: String!
  title: String
}

input UserCreateWithoutFollowingInput {
  contentFeedbacks: ContentFeedbackCreateManyWithoutContentFeedbacksInput
  contentLists: ContentListCreateManyWithoutContentListsInput
  contentListsFollowed: ContentListCreateManyWithoutContentListsFollowedInput
  description: String
  email: String!
  firstName: String!
  followers: UserCreateManyWithoutFollowersInput
  id: ID
  lastName: String!
  password: String!
  title: String
}

input UserUpdateInput {
  contentFeedbacks: ContentFeedbackUpdateManyWithoutAuthorInput
  contentLists: ContentListUpdateManyWithoutOwnerInput
  contentListsFollowed: ContentListUpdateManyWithoutFollowersInput
  description: String
  email: String
  firstName: String
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  id: ID
  lastName: String
  password: String
  title: String
}

input UserUpdateManyDataInput {
  description: String
  email: String
  firstName: String
  id: ID
  lastName: String
  password: String
  title: String
}

input UserUpdateManyWithoutContentListsFollowedInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutContentListsFollowedInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [MutationUpdateOneContentListWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutContentListsFollowedInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutContentListsFollowedInput!]
}

input UserUpdateManyWithoutFollowersInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFollowersInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [MutationUpdateOneUserWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowersInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowersInput!]
}

input UserUpdateManyWithoutFollowingInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutFollowingInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [MutationUpdateOneUserWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFollowingInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFollowingInput!]
}

input UserUpdateManyWithWhereNestedInput {
  data: UserUpdateManyDataInput!
  where: MutationUpdateOneUserWhereInput!
}

input UserUpdateOneRequiredWithoutContentFeedbacksInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutContentFeedbacksInput
  update: UserUpdateWithoutContentFeedbacksDataInput
  upsert: UserUpsertWithoutContentFeedbacksInput
}

input UserUpdateOneRequiredWithoutContentListsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutContentListsInput
  update: UserUpdateWithoutContentListsDataInput
  upsert: UserUpsertWithoutContentListsInput
}

input UserUpdateWithoutContentFeedbacksDataInput {
  contentLists: ContentListUpdateManyWithoutOwnerInput
  contentListsFollowed: ContentListUpdateManyWithoutFollowersInput
  description: String
  email: String
  firstName: String
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  id: ID
  lastName: String
  password: String
  title: String
}

input UserUpdateWithoutContentListsDataInput {
  contentFeedbacks: ContentFeedbackUpdateManyWithoutAuthorInput
  contentListsFollowed: ContentListUpdateManyWithoutFollowersInput
  description: String
  email: String
  firstName: String
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  id: ID
  lastName: String
  password: String
  title: String
}

input UserUpdateWithoutContentListsFollowedDataInput {
  contentFeedbacks: ContentFeedbackUpdateManyWithoutAuthorInput
  contentLists: ContentListUpdateManyWithoutOwnerInput
  description: String
  email: String
  firstName: String
  followers: UserUpdateManyWithoutFollowingInput
  following: UserUpdateManyWithoutFollowersInput
  id: ID
  lastName: String
  password: String
  title: String
}

input UserUpdateWithoutFollowersDataInput {
  contentFeedbacks: ContentFeedbackUpdateManyWithoutAuthorInput
  contentLists: ContentListUpdateManyWithoutOwnerInput
  contentListsFollowed: ContentListUpdateManyWithoutFollowersInput
  description: String
  email: String
  firstName: String
  following: UserUpdateManyWithoutFollowersInput
  id: ID
  lastName: String
  password: String
  title: String
}

input UserUpdateWithoutFollowingDataInput {
  contentFeedbacks: ContentFeedbackUpdateManyWithoutAuthorInput
  contentLists: ContentListUpdateManyWithoutOwnerInput
  contentListsFollowed: ContentListUpdateManyWithoutFollowersInput
  description: String
  email: String
  firstName: String
  followers: UserUpdateManyWithoutFollowingInput
  id: ID
  lastName: String
  password: String
  title: String
}

input UserUpdateWithWhereUniqueWithoutContentListsFollowedInput {
  data: UserUpdateWithoutContentListsFollowedDataInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutFollowersInput {
  data: UserUpdateWithoutFollowersDataInput!
  where: UserWhereUniqueInput!
}

input UserUpdateWithWhereUniqueWithoutFollowingInput {
  data: UserUpdateWithoutFollowingDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutContentFeedbacksInput {
  create: UserCreateWithoutContentFeedbacksInput!
  update: UserUpdateWithoutContentFeedbacksDataInput!
}

input UserUpsertWithoutContentListsInput {
  create: UserCreateWithoutContentListsInput!
  update: UserUpdateWithoutContentListsDataInput!
}

input UserUpsertWithWhereUniqueWithoutContentListsFollowedInput {
  create: UserCreateWithoutContentListsFollowedInput!
  update: UserUpdateWithoutContentListsFollowedDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutFollowersInput {
  create: UserCreateWithoutFollowersInput!
  update: UserUpdateWithoutFollowersDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithWhereUniqueWithoutFollowingInput {
  create: UserCreateWithoutFollowingInput!
  update: UserUpdateWithoutFollowingDataInput!
  where: UserWhereUniqueInput!
}

input UserWhereUniqueInput {
  email: String
  id: ID
}
