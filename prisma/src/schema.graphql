### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type AuthPayload {
  expiresIn: Int!
  token: String!
  user: User!
}

type DailyRoutineEvent {
  endTime: Int!
  id: ID!
  name: String!
  owner: User!
  startTime: Int!
}

input DailyRoutineEventCreateInput {
  endTime: Int!
  id: ID
  name: String!
  owner: UserCreateOneWithoutOwnerInput!
  startTime: Int!
}

input DailyRoutineEventCreateWithoutOwnerInput {
  endTime: Int!
  id: ID
  name: String!
  startTime: Int!
}

input DailyRoutineEventUpdateInput {
  endTime: Int
  id: ID
  name: String
  owner: UserUpdateOneRequiredWithoutDailyRoutineInput
  startTime: Int
}

input DailyRoutineEventUpdateManyDataInput {
  endTime: Int
  id: ID
  name: String
  startTime: Int
}

input DailyRoutineEventUpdateManyWithoutOwnerInput {
  connect: [DailyRoutineEventWhereUniqueInput!]
  create: [DailyRoutineEventCreateWithoutOwnerInput!]
  delete: [DailyRoutineEventWhereUniqueInput!]
  deleteMany: [MutationUpdateOneUserWhereInput!]
  disconnect: [DailyRoutineEventWhereUniqueInput!]
  set: [DailyRoutineEventWhereUniqueInput!]
  update: [DailyRoutineEventUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [DailyRoutineEventUpdateManyWithWhereNestedInput!]
  upsert: [DailyRoutineEventUpsertWithWhereUniqueWithoutOwnerInput!]
}

input DailyRoutineEventUpdateManyWithWhereNestedInput {
  data: DailyRoutineEventUpdateManyDataInput!
  where: MutationUpdateOneUserWhereInput!
}

input DailyRoutineEventUpdateWithoutOwnerDataInput {
  endTime: Int
  id: ID
  name: String
  startTime: Int
}

input DailyRoutineEventUpdateWithWhereUniqueWithoutOwnerInput {
  data: DailyRoutineEventUpdateWithoutOwnerDataInput!
  where: DailyRoutineEventWhereUniqueInput!
}

input DailyRoutineEventUpsertWithWhereUniqueWithoutOwnerInput {
  create: DailyRoutineEventCreateWithoutOwnerInput!
  update: DailyRoutineEventUpdateWithoutOwnerDataInput!
  where: DailyRoutineEventWhereUniqueInput!
}

input DailyRoutineEventWhereUniqueInput {
  id: ID
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Mutation {
  createOneDailyRoutineEvent(data: DailyRoutineEventCreateInput!): DailyRoutineEvent!
  deleteOneDailyRoutineEvent(where: DailyRoutineEventWhereUniqueInput!): DailyRoutineEvent
  deleteOneUser(where: UserWhereUniqueInput!): User
  signin(email: String, password: String): AuthPayload!
  signup(email: String, password: String, passwordConfirmation: String): AuthPayload!
  updateOneDailyRoutineEvent(data: DailyRoutineEventUpdateInput!, where: DailyRoutineEventWhereUniqueInput!): DailyRoutineEvent
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
}

input MutationUpdateOneUserWhereInput {
  AND: [MutationUpdateOneUserWhereInput!]
  endTime: IntFilter
  id: StringFilter
  name: StringFilter
  NOT: [MutationUpdateOneUserWhereInput!]
  OR: [MutationUpdateOneUserWhereInput!]
  startTime: IntFilter
}

type Query {
  findManyDailyRoutineEvent(after: String, before: String, first: Int, last: Int, skip: Int): [DailyRoutineEvent!]
  findManyUser(after: String, before: String, first: Int, last: Int, skip: Int): [User!]
  findOneDailyRoutineEvent(where: DailyRoutineEventWhereUniqueInput!): DailyRoutineEvent
  findOneUser(where: UserWhereUniqueInput!): User
  me: AuthPayload!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  dailyRoutine(after: String, before: String, first: Int, last: Int, skip: Int): [DailyRoutineEvent!]
  id: ID!
}

input UserCreateOneWithoutOwnerInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutDailyRoutineInput
}

input UserCreateWithoutDailyRoutineInput {
  email: String!
  id: ID
  password: String!
}

input UserUpdateInput {
  dailyRoutine: DailyRoutineEventUpdateManyWithoutOwnerInput
  email: String
  id: ID
  password: String
}

input UserUpdateOneRequiredWithoutDailyRoutineInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutDailyRoutineInput
  update: UserUpdateWithoutDailyRoutineDataInput
  upsert: UserUpsertWithoutDailyRoutineInput
}

input UserUpdateWithoutDailyRoutineDataInput {
  email: String
  id: ID
  password: String
}

input UserUpsertWithoutDailyRoutineInput {
  create: UserCreateWithoutDailyRoutineInput!
  update: UserUpdateWithoutDailyRoutineDataInput!
}

input UserWhereUniqueInput {
  email: String
  id: ID
}
