### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type AuthPayload {
  expiresIn: Int!
  token: String!
  user: User!
}

type DailyRoutineItem {
  endTime: Int!
  id: ID!
  name: String!
  owner: User!
  startTime: Int!
}

input DailyRoutineItemCreateInput {
  endTime: Int!
  id: ID
  name: String!
  owner: UserCreateOneWithoutOwnerInput!
  startTime: Int!
}

input DailyRoutineItemCreateWithoutOwnerInput {
  endTime: Int!
  id: ID
  name: String!
  startTime: Int!
}

input DailyRoutineItemUpdateInput {
  endTime: Int
  id: ID
  name: String
  owner: UserUpdateOneRequiredWithoutDailyRoutineInput
  startTime: Int
}

input DailyRoutineItemUpdateManyDataInput {
  endTime: Int
  id: ID
  name: String
  startTime: Int
}

input DailyRoutineItemUpdateManyWithoutOwnerInput {
  connect: [DailyRoutineItemWhereUniqueInput!]
  create: [DailyRoutineItemCreateWithoutOwnerInput!]
  delete: [DailyRoutineItemWhereUniqueInput!]
  deleteMany: [MutationUpdateOneUserWhereInput!]
  disconnect: [DailyRoutineItemWhereUniqueInput!]
  set: [DailyRoutineItemWhereUniqueInput!]
  update: [DailyRoutineItemUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [DailyRoutineItemUpdateManyWithWhereNestedInput!]
  upsert: [DailyRoutineItemUpsertWithWhereUniqueWithoutOwnerInput!]
}

input DailyRoutineItemUpdateManyWithWhereNestedInput {
  data: DailyRoutineItemUpdateManyDataInput!
  where: MutationUpdateOneUserWhereInput!
}

input DailyRoutineItemUpdateWithoutOwnerDataInput {
  endTime: Int
  id: ID
  name: String
  startTime: Int
}

input DailyRoutineItemUpdateWithWhereUniqueWithoutOwnerInput {
  data: DailyRoutineItemUpdateWithoutOwnerDataInput!
  where: DailyRoutineItemWhereUniqueInput!
}

input DailyRoutineItemUpsertWithWhereUniqueWithoutOwnerInput {
  create: DailyRoutineItemCreateWithoutOwnerInput!
  update: DailyRoutineItemUpdateWithoutOwnerDataInput!
  where: DailyRoutineItemWhereUniqueInput!
}

input DailyRoutineItemWhereUniqueInput {
  id: ID
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Mutation {
  createOneDailyRoutineItem(data: DailyRoutineItemCreateInput!): DailyRoutineItem!
  deleteOneDailyRoutineItem(where: DailyRoutineItemWhereUniqueInput!): DailyRoutineItem
  deleteOneUser(where: UserWhereUniqueInput!): User
  signin(email: String, password: String): AuthPayload!
  signup(email: String, password: String, passwordConfirmation: String): AuthPayload!
  updateOneDailyRoutineItem(data: DailyRoutineItemUpdateInput!, where: DailyRoutineItemWhereUniqueInput!): DailyRoutineItem
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
}

input MutationUpdateOneUserWhereInput {
  AND: [MutationUpdateOneUserWhereInput!]
  endTime: IntFilter
  id: StringFilter
  name: StringFilter
  NOT: [MutationUpdateOneUserWhereInput!]
  OR: [MutationUpdateOneUserWhereInput!]
  startTime: IntFilter
}

type Query {
  findManyDailyRoutineItem(after: String, before: String, first: Int, last: Int, skip: Int): [DailyRoutineItem!]
  findManyUser(after: String, before: String, first: Int, last: Int, skip: Int): [User!]
  findOneDailyRoutineItem(where: DailyRoutineItemWhereUniqueInput!): DailyRoutineItem
  findOneUser(where: UserWhereUniqueInput!): User
  me: AuthPayload!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  dailyRoutine(after: String, before: String, first: Int, last: Int, skip: Int): [DailyRoutineItem!]
  id: ID!
}

input UserCreateOneWithoutOwnerInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutDailyRoutineInput
}

input UserCreateWithoutDailyRoutineInput {
  email: String!
  id: ID
  password: String!
}

input UserUpdateInput {
  dailyRoutine: DailyRoutineItemUpdateManyWithoutOwnerInput
  email: String
  id: ID
  password: String
}

input UserUpdateOneRequiredWithoutDailyRoutineInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutDailyRoutineInput
  update: UserUpdateWithoutDailyRoutineDataInput
  upsert: UserUpsertWithoutDailyRoutineInput
}

input UserUpdateWithoutDailyRoutineDataInput {
  email: String
  id: ID
  password: String
}

input UserUpsertWithoutDailyRoutineInput {
  create: UserCreateWithoutDailyRoutineInput!
  update: UserUpdateWithoutDailyRoutineDataInput!
}

input UserWhereUniqueInput {
  email: String
  id: ID
}
